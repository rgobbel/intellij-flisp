/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package ai.memity.flisp.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static ai.memity.flisp.lang.psi.FlispElementTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>flisp-lexer.flex</tt>
 */
public class _FlispLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_BLOCK_COMMENT = 2;
  public static final int IN_CHAR_CONSTANT = 4;
  public static final int READ_MACRO_DISPATCH = 6;
  public static final int SUPERQUOTE = 8;
  public static final int IN_STRING = 10;
  public static final int STRING_ESCAPE = 12;
  public static final int SQ_ESCAPE = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7, 7
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [10, 6, 5]
   * Total runtime size is 3968 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>11]<<6)|((ch>>5)&0x3f)]<<5)|(ch&0x1f)];
  }

  /* The ZZ_CMAP_Z table has 544 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\17\5\1\6\1\7\11\5\1\10\1\11\1\5\1\12\1\13\11\5\1\14\14"+
    "\5\1\15\2\5\1\16\u01e2\5");

  /* The ZZ_CMAP_Y table has 960 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\56\5\1\6\3\5\1\7\6\5\1\6\14\5\1\10\3\5\1\10\3\5\1\10"+
    "\3\5\1\10\3\5\1\10\3\5\1\10\3\5\1\10\3\5\1\10\3\5\1\10\3\5\1\10\2\5\1\7\3"+
    "\5\1\7\2\5\1\6\10\5\1\6\1\5\1\7\72\5\1\6\1\7\11\5\1\10\3\5\1\7\5\5\1\11\5"+
    "\5\1\7\2\5\1\7\4\5\1\11\36\5\1\12\257\5\1\6\24\5\1\7\1\5\1\6\5\5\2\7\2\5\1"+
    "\7\14\5\1\7\130\5\1\7\2\13\52\5\1\6\35\5\1\10\3\5\1\7\1\5\1\14\4\5\1\7\10"+
    "\5\1\7\12\5\1\7\3\5\1\7\13\5\1\7\3\5\1\6\2\5\1\7\15\5\1\6\32\5\1\7\60\5\1"+
    "\6\6\5\1\7\143\5\1\15\1\16\12\5\1\7\65\5");

  /* The ZZ_CMAP_A table has 480 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\1\1\1\33\2\1\22\0\1\2\1\0\1\35\1\3\3\0\1\60\1\51\1\52\1\0\1\46\1"+
    "\57\1\46\1\43\1\0\1\40\1\44\6\41\2\42\1\36\1\32\1\0\1\63\2\0\1\62\6\31\2\0"+
    "\1\50\4\0\1\47\14\0\1\53\1\6\1\54\2\0\1\61\1\12\1\15\1\16\1\24\1\22\1\5\1"+
    "\26\1\0\1\23\1\0\1\17\1\11\1\14\1\7\1\45\1\21\1\0\1\13\1\20\1\4\1\10\1\25"+
    "\1\27\1\30\2\0\1\55\1\37\1\56\7\0\1\34\72\0\12\42\46\0\12\42\14\0\12\42\20"+
    "\0\12\42\6\0\12\42\16\0\2\34\27\0\6\31\57\0\12\42\16\0\62\42");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\1\1\1\2\1\3\1\4\1\5\1\2\1\4"+
    "\1\1\1\6\2\7\1\10\1\1\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\3\22\14\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\24\3\1\1\37\1\40\1\1"+
    "\1\41\2\0\1\42\1\35\1\7\2\1\1\43\1\0"+
    "\1\44\1\45\3\0\1\23\10\0\1\46\1\47\1\7"+
    "\1\1\2\7\2\1\1\0\1\23\6\0\1\7\1\0"+
    "\1\23\15\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[119];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\u0104\0\u0138\0\u016c"+
    "\0\u01a0\0\u01d4\0\u0208\0\u023c\0\u0270\0\u02a4\0\u02d8\0\u030c"+
    "\0\u023c\0\u0340\0\u0374\0\u03a8\0\u03dc\0\u023c\0\u023c\0\u023c"+
    "\0\u023c\0\u01a0\0\u01a0\0\u0410\0\u0444\0\u023c\0\u023c\0\u0478"+
    "\0\u04ac\0\u023c\0\u04e0\0\u0514\0\u0548\0\u057c\0\u05b0\0\u05e4"+
    "\0\u0618\0\u064c\0\u0680\0\u06b4\0\u06e8\0\u071c\0\u0750\0\u023c"+
    "\0\u023c\0\u023c\0\u023c\0\u023c\0\u023c\0\u023c\0\u01a0\0\u01a0"+
    "\0\u023c\0\u0784\0\u07b8\0\u07ec\0\u023c\0\u023c\0\u0820\0\u023c"+
    "\0\u02d8\0\u0854\0\u023c\0\u030c\0\u03a8\0\u0888\0\u08bc\0\u023c"+
    "\0\u08f0\0\u023c\0\u023c\0\u0924\0\u0958\0\u098c\0\u09c0\0\u09f4"+
    "\0\u0a28\0\u0a5c\0\u0a90\0\u0ac4\0\u0af8\0\u0b2c\0\u04e0\0\u023c"+
    "\0\u023c\0\u0784\0\u03a8\0\u07ec\0\u0820\0\u0b60\0\u0b94\0\u0bc8"+
    "\0\u0bfc\0\u0c30\0\u0c64\0\u0c98\0\u0ccc\0\u0d00\0\u0d34\0\u01a0"+
    "\0\u0d68\0\u0d9c\0\u0dd0\0\u0e04\0\u0e38\0\u0e6c\0\u0ea0\0\u0ed4"+
    "\0\u0f08\0\u0f3c\0\u0f70\0\u0fa4\0\u0fd8\0\u100c\0\u1040";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[119];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\2\12\1\13\2\11\1\14\23\11\1\15\1\16"+
    "\1\11\1\17\1\20\1\21\1\22\2\23\1\24\1\23"+
    "\1\11\1\25\2\11\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\2\11\3\37\1\40\33\37"+
    "\1\41\24\37\4\42\1\43\2\42\1\44\1\45\1\46"+
    "\1\47\1\50\1\42\1\51\3\42\1\52\1\53\1\42"+
    "\1\54\1\55\2\42\1\45\33\42\6\14\1\56\34\14"+
    "\1\57\5\14\1\60\11\14\1\61\6\37\1\62\30\37"+
    "\1\63\24\37\6\14\1\64\26\14\1\65\26\14\64\66"+
    "\64\21\1\11\2\0\3\11\1\0\23\11\1\0\2\11"+
    "\1\0\1\67\1\0\11\11\4\0\2\11\3\0\2\11"+
    "\1\0\2\12\30\0\1\12\30\0\1\11\2\0\1\11"+
    "\2\70\1\71\6\11\1\72\6\11\1\73\3\11\1\74"+
    "\1\11\1\75\2\11\1\0\1\67\1\76\5\11\1\77"+
    "\3\11\1\100\3\0\2\11\3\0\2\11\64\0\1\15"+
    "\1\0\31\15\2\0\27\15\1\11\2\12\3\11\1\0"+
    "\23\11\1\0\1\16\1\11\1\0\1\67\1\0\11\11"+
    "\4\0\2\11\3\0\2\11\6\101\1\102\26\101\1\103"+
    "\26\101\1\104\2\0\3\104\1\0\23\104\1\0\2\104"+
    "\1\0\1\104\1\0\11\104\4\0\2\104\3\0\2\104"+
    "\1\11\2\0\3\11\1\0\21\11\1\74\1\11\1\0"+
    "\2\11\1\0\1\67\1\0\3\23\1\105\1\23\4\11"+
    "\4\0\2\11\3\0\3\11\2\0\3\11\1\0\23\11"+
    "\1\0\2\11\1\0\1\67\1\0\3\23\1\105\1\23"+
    "\4\11\4\0\2\11\3\0\3\11\2\0\3\11\1\0"+
    "\23\11\1\0\2\11\1\0\1\67\1\0\3\105\1\11"+
    "\1\105\4\11\4\0\2\11\3\0\3\11\2\0\3\11"+
    "\1\0\23\11\1\0\2\11\1\0\1\67\1\0\7\11"+
    "\1\106\1\107\4\0\2\11\3\0\2\11\43\0\1\110"+
    "\55\0\1\111\65\0\1\112\27\0\1\113\72\0\1\114"+
    "\61\0\1\115\11\0\1\116\46\0\1\117\4\0\1\117"+
    "\2\0\2\117\3\0\1\117\1\0\1\117\4\0\1\117"+
    "\6\0\3\117\1\0\1\117\42\0\1\120\51\0\1\121"+
    "\74\0\1\122\53\0\1\123\63\0\1\124\71\0\1\125"+
    "\65\0\1\126\45\0\1\127\141\0\1\130\4\0\1\131"+
    "\60\0\1\11\2\0\3\11\1\0\23\11\1\0\2\11"+
    "\1\0\1\67\1\0\1\132\3\11\1\132\4\11\4\0"+
    "\2\11\3\0\3\11\2\0\3\11\1\0\23\11\1\0"+
    "\2\11\1\0\1\67\1\0\3\23\1\133\1\23\4\11"+
    "\4\0\2\11\3\0\3\11\2\0\2\11\1\134\1\0"+
    "\3\11\1\134\2\11\2\134\3\11\1\134\1\11\1\134"+
    "\4\11\1\134\1\0\2\11\1\0\1\67\1\0\3\134"+
    "\1\11\1\134\4\11\4\0\2\11\3\0\3\11\2\0"+
    "\3\11\1\0\23\11\1\0\2\11\1\0\1\67\1\0"+
    "\2\135\2\11\1\135\4\11\4\0\2\11\3\0\2\11"+
    "\1\101\1\0\31\101\2\0\27\101\1\11\2\0\3\11"+
    "\1\0\3\11\1\136\17\11\1\0\2\11\1\0\1\67"+
    "\1\0\11\11\4\0\2\11\3\0\3\11\2\0\3\11"+
    "\1\0\1\137\22\11\1\0\2\11\1\0\1\67\1\0"+
    "\11\11\4\0\2\11\3\0\2\11\60\0\1\66\20\0"+
    "\1\42\57\0\1\42\101\0\1\140\41\0\1\141\4\0"+
    "\1\141\2\0\2\141\3\0\1\141\1\0\1\141\4\0"+
    "\1\141\6\0\3\141\1\0\1\141\26\0\1\142\66\0"+
    "\1\143\55\0\1\144\75\0\1\145\73\0\1\146\53\0"+
    "\1\42\56\0\1\147\52\0\1\11\2\0\3\11\1\0"+
    "\23\11\1\0\2\11\1\0\1\67\1\0\7\11\1\150"+
    "\1\11\4\0\2\11\3\0\3\11\2\0\2\11\1\150"+
    "\1\0\23\11\1\0\2\11\1\0\1\67\1\0\11\11"+
    "\4\0\2\11\3\0\2\11\11\0\1\151\57\0\1\152"+
    "\4\0\1\152\2\0\2\152\3\0\1\152\1\0\1\152"+
    "\4\0\1\152\6\0\3\152\1\0\1\152\41\0\1\153"+
    "\54\0\1\154\60\0\1\155\72\0\1\156\66\0\1\42"+
    "\63\0\1\157\64\0\1\160\45\0\1\42\4\0\1\42"+
    "\2\0\2\42\3\0\1\42\1\0\1\42\4\0\1\42"+
    "\6\0\3\42\1\0\1\42\24\0\1\161\72\0\1\42"+
    "\62\0\1\162\70\0\1\163\47\0\1\146\66\0\1\146"+
    "\76\0\1\164\50\0\1\42\75\0\1\165\64\0\1\166"+
    "\53\0\1\167\75\0\1\42\55\0\1\146\45\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4212];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\3\1\1\11\4\1\1\11\4\1\4\11\4\1"+
    "\2\11\2\1\1\11\15\1\7\11\2\1\1\11\3\1"+
    "\2\11\1\1\1\11\2\0\1\11\4\1\1\11\1\0"+
    "\2\11\3\0\1\1\10\0\2\11\6\1\1\0\1\1"+
    "\6\0\1\1\1\0\1\1\15\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[119];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _FlispLexer() {
    this((java.io.Reader)null);
  }
  private int zzNestedCommentLevel = 0;
  private int zzPostponedMarkedPos = -1;

  IElementType finishBlockComment() {
    assert(zzNestedCommentLevel == 0);
    yybegin(YYINITIAL);
    zzStartRead = zzPostponedMarkedPos;
    zzPostponedMarkedPos = -1;
    return F_BLOCK_COMMENT;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _FlispLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        switch (zzLexicalState) {
            case IN_BLOCK_COMMENT: {
              zzNestedCommentLevel = 0; return finishBlockComment();
            }  // fall though
            case 120: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return F_SYM;
            } 
            // fall through
          case 40: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 41: break;
          case 3: 
            { yybegin(READ_MACRO_DISPATCH);
            } 
            // fall through
          case 42: break;
          case 4: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 43: break;
          case 5: 
            { return F_LINE_COMMENT;
            } 
            // fall through
          case 44: break;
          case 6: 
            { yybegin(SUPERQUOTE);
            } 
            // fall through
          case 45: break;
          case 7: 
            { return F_NUM;
            } 
            // fall through
          case 46: break;
          case 8: 
            { return F_DOT;
            } 
            // fall through
          case 47: break;
          case 9: 
            { return F_LPAR;
            } 
            // fall through
          case 48: break;
          case 10: 
            { return F_RPAR;
            } 
            // fall through
          case 49: break;
          case 11: 
            { return F_LBRACK;
            } 
            // fall through
          case 50: break;
          case 12: 
            { return F_RBRACK;
            } 
            // fall through
          case 51: break;
          case 13: 
            { return F_LBRACE;
            } 
            // fall through
          case 52: break;
          case 14: 
            { return F_RBRACE;
            } 
            // fall through
          case 53: break;
          case 15: 
            { return F_COMMA;
            } 
            // fall through
          case 54: break;
          case 16: 
            { return F_QUOTE_CHAR;
            } 
            // fall through
          case 55: break;
          case 17: 
            { return F_BQUOTE_CHAR;
            } 
            // fall through
          case 56: break;
          case 18: 
            { 
            } 
            // fall through
          case 57: break;
          case 19: 
            { yybegin(YYINITIAL); return F_CHAR;
            } 
            // fall through
          case 58: break;
          case 20: 
            { yybegin(IN_CHAR_CONSTANT);
            } 
            // fall through
          case 59: break;
          case 21: 
            { yybegin(YYINITIAL); return F_SHARP_DOT;
            } 
            // fall through
          case 60: break;
          case 22: 
            { yybegin(YYINITIAL); return F_LPAR_VEC;
            } 
            // fall through
          case 61: break;
          case 23: 
            { yybegin(YYINITIAL); return F_BACKREF_DEF;
            } 
            // fall through
          case 62: break;
          case 24: 
            { yybegin(SQ_ESCAPE);
            } 
            // fall through
          case 63: break;
          case 25: 
            { yybegin(YYINITIAL); return F_SYM;
            } 
            // fall through
          case 64: break;
          case 26: 
            { yybegin(STRING_ESCAPE);
            } 
            // fall through
          case 65: break;
          case 27: 
            { yybegin(YYINITIAL); return F_STRING;
            } 
            // fall through
          case 66: break;
          case 28: 
            { yybegin(IN_STRING);
            } 
            // fall through
          case 67: break;
          case 29: 
            { return F_KW;
            } 
            // fall through
          case 68: break;
          case 30: 
            { return F_BOOL;
            } 
            // fall through
          case 69: break;
          case 31: 
            { return F_FORM_COMMENT_START;
            } 
            // fall through
          case 70: break;
          case 32: 
            { yybegin(IN_BLOCK_COMMENT); yypushback(2);
            } 
            // fall through
          case 71: break;
          case 33: 
            { return F_LPAR_VEC;
            } 
            // fall through
          case 72: break;
          case 34: 
            { return F_STRING;
            } 
            // fall through
          case 73: break;
          case 35: 
            { return F_COMMA_DOT;
            } 
            // fall through
          case 74: break;
          case 36: 
            { if (zzNestedCommentLevel++ == 0)
              zzPostponedMarkedPos = zzStartRead;
            } 
            // fall through
          case 75: break;
          case 37: 
            { if (--zzNestedCommentLevel == 0)
              return finishBlockComment();
            } 
            // fall through
          case 76: break;
          case 38: 
            { yybegin(YYINITIAL); return F_SHARP_BACK_AT;
            } 
            // fall through
          case 77: break;
          case 39: 
            { yybegin(YYINITIAL); return F_BACKREF;
            } 
            // fall through
          case 78: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
